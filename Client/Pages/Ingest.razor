@page "/Ingest"
@using System.Net.Http.Headers
@using System.Text.Json
@using Client.Models
@using Shared

@inject HttpClient Http

<PageTitle>Ingest</PageTitle>

<h1>Ingest</h1>

<p>
    <button type="button" class="btn btn-danger" @onclick=PurgeIndex>Purge Index</button>
</p>

<p>
    Upload files (txt,pdf):
    <InputFile OnChange="@OnInputFileChange" multiple accept=".txt,.pdf" />
</p>

@if (showIngestMsg)
{
    <small>Please wait while ingesting files...</small>
    <br />
    <br />
}

@if (files.Count > 0)
{
  
    @foreach (var file in files)
    {
        <div class="card">
            <div class="card-body">
                <b>@file.Name</b>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @file.PerecentProcessed%"></div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<File> files = new();
    bool showIngestMsg;

    private async Task PurgeIndex()
    {
        var response = await Http.PostAsync("/chat/purgeindex", null);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        files.Clear();
        showIngestMsg = true;
        long maxFileSize = 1024 * 1024 * 15; // 15 MB

        var filesFromInput = e.GetMultipleFiles(int.MaxValue);

        for (int i = 0; i < filesFromInput.Count; i++)
        {
            var file = filesFromInput.ElementAt(i);
            files.Add(new() { Name = file.Name });
        }

        for (int i = 0; i < filesFromInput.Count; i++)
        {
            var fileToIngest = filesFromInput.ElementAt(i);
            var file = files.ElementAt(i);

            var fileContent = new StreamContent(fileToIngest.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(fileToIngest.ContentType);

            using var content = new MultipartFormDataContent();

            content.Add(fileContent, "File", fileToIngest.Name);
            content.Add(new StringContent(i.ToString()), "FileUploadIndex");

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, "/chat/ingestdata");
            request.Content = content;
            request.SetBrowserResponseStreamingEnabled(true);

            using HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);
            response.EnsureSuccessStatusCode();

            using Stream responseStream = await response.Content.ReadAsStreamAsync();


            await foreach (var fileProgress in JsonSerializer.DeserializeAsyncEnumerable<FileChunkProgress>(
                responseStream,
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            }))
            {
                file.PerecentProcessed = fileProgress.PercentProcessed;
                StateHasChanged();
            }
        }

        showIngestMsg = false;
    }
}