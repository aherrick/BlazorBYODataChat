@page "/Documents"
@using System.Net.Http.Headers
@using System.Text.Json
@using Blazored.Toast.Services
@using Client.Models
@using Client.Helpers
@using Shared

@inject CustomHttpClient CustomHttpClient
@inject CustomSweetAlertService CustomSweetAlertService
@inject NavigationManager NavManager
@inject IToastService toastService

@implements IDisposable

<PageTitle>Documents</PageTitle>

<h1>Documents</h1>

<p>
    <button type="button" class="btn btn-danger" @onclick=PurgeIndex>

        Purge Index
    </button>
</p>

<p>
    Upload files (txt,pdf,docx):
    <InputFile OnChange="@OnInputFileChange" multiple accept=".txt,.pdf,.docx" />
</p>

@if (files.Count > 0)
{
    if (IsProcessing)
    {
        <small>Please wait while ingesting files...</small>
        <small>@filesProcessed/@files.Count</small>
        <br />
        <br />
    }

    @foreach (var file in files)
    {
        <div class="card">
            <div class="card-body">
                <b>@file.Name</b>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @file.PerecentProcessed%"></div>
                </div>
            </div>
        </div>
    }
}

@if (documents.Count > 0)
{

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Id</th>

                <th scope="col">Name</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in documents)
            {
                <tr>
                    <td>@item.DocumentId</td>

                    <td>@item.Name</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteDocument(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<DocumentDto> documents = new();
    List<File> files = new();
    int filesProcessed = 0;
    IDisposable regLocationChangeHandler;

    bool IsProcessing => filesProcessed < files.Count;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            regLocationChangeHandler = NavManager.RegisterLocationChangingHandler(LocationChangingHandler);
        }
    }

    private async Task DeleteDocument(DocumentDto document)
    {
        await CustomHttpClient.Post<bool>("/chat/deletedocument", document);

        toastService.ShowSuccess($"Deleted: {document.Name}");

        documents.Remove(document);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    async Task LoadDocuments()
    {
        var docs = await CustomHttpClient.Get<List<DocumentDto>>("/chat/getdocuments");

        documents.Clear();

        documents.AddRange(docs);
    }

    private async ValueTask LocationChangingHandler(LocationChangingContext arg)
    {
        if (IsProcessing)
        {
            await CustomSweetAlertService.Confirm("Are you sure you want to leave?", "Files are ingesting!",
                    yesAction: () =>
                    {
                        // let Yes fall through
                    },
                    noAction: () =>
                    {

                        // if no prevent nav
                        arg.PreventNavigation();
                    });
        }
    }

    private async Task PurgeIndex()
    {
        await CustomHttpClient.Post<bool>("/chat/purgeindex", null);

        documents.Clear();

        await CustomSweetAlertService.Success("Purged Index");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        files.Clear();
        long maxFileSize = 1024 * 1024 * 15; // 15 MB

        var filesFromInput = e.GetMultipleFiles(int.MaxValue);

        for (int i = 0; i < filesFromInput.Count; i++)
        {
            var file = filesFromInput.ElementAt(i);
            files.Add(new() { Name = file.Name });
        }

        for (int i = 0; i < filesFromInput.Count; i++)
        {
            var fileToIngest = filesFromInput.ElementAt(i);
            var file = files.ElementAt(i);

            var fileContent = new StreamContent(fileToIngest.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(fileToIngest.ContentType);

            using var content = new MultipartFormDataContent();

            var docId = Guid.NewGuid().ToString();

            content.Add(fileContent, "File", fileToIngest.Name);
            content.Add(new StringContent(docId), "Id");

            await foreach (var fileProgress in CustomHttpClient.PostStream<FileChunkProgress>("/chat/ingestdata", content))
            {
                file.PerecentProcessed = fileProgress.PercentProcessed;
                StateHasChanged();
            }

            filesProcessed++;

            documents.Add(new DocumentDto()
                {
                    Name = fileToIngest.Name,
                    DocumentId = docId
                });
        }

        await LoadDocuments();
    }

    public void Dispose()
    {
        regLocationChangeHandler?.Dispose();
    }
}