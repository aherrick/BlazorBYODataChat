@page "/chat"

@using System.Text.Json
@using System.Web
@using Shared
@using Client.Helpers

@inject IJSRuntime JsRuntime
@inject CustomHttpClient CustomHttpClient

<PageTitle>Chat</PageTitle>

<table class="table">
    <thead>
        <tr>
            <th>Author</th>
            <th>Message</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < chats.Count; i++)
        {
            var chat = chats[i];
            <tr>
                <td>@chat.Author</td>
                <td>

                    @if (i == chats.Count - 1 && isQuerying)
                    {
                        <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
                    }

                    <pre>
                        @chat.Message
                                                                    </pre>

                    @if (chat.Sources.Count > 0)
                    {
                        <p>
                            @foreach (var source in chat.Sources)
                            {
                                <a href="@source.Url" target="_blank"> <small>@source.Title</small></a>
                                <br />
                            }
                        </p>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<p>
    <input @ref="queryInput" @bind="QueryVal" @bind:event="oninput" @onkeyup="Enter" placeholder="Enter your query..." style="width: 500px" />
    <button class="btn btn-primary" @onclick="SubmitQuery" disabled="@ButtonDisabled">Submit</button>
</p>

@code {
    ElementReference queryInput;

    private bool ButtonDisabled = true;
    private string _queryVal;
    private string QueryVal
    {
        get { return this._queryVal; }
        set
        {
            _queryVal = value;
            ButtonDisabled = _queryVal?.Trim().Length == 0;
        }
    }

    private List<ChatMsgDto> chats = new List<ChatMsgDto>();
    private bool isQuerying;

    public async void Enter(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && QueryVal?.Trim().Length > 0)
        {
            await SubmitQuery();
        }
    }

    private async Task SubmitQuery()
    {
        isQuerying = true;

        chats.Add(new ChatMsgDto() { Message = QueryVal, Author = ChatMsgAuthor.user });

        var chatAssistantResponse = new ChatMsgDto()
            {
                Author = ChatMsgAuthor.assistant
            };
        chats.Add(chatAssistantResponse);

        var chatDto = new ChatDto { Query = QueryVal };

        ChatMsgDto chatMsgDto = null;
        var httpContent = new StringContent(JsonSerializer.Serialize(chatDto), System.Text.Encoding.UTF8, "application/json");

        await foreach (var chatResponse in CustomHttpClient.PostStream<ChatMsgDto>("/chat/StreamMemorySearch", httpContent))
        {
            if (chatResponse?.Message?.Length > 0)
            {
                isQuerying = false;
            }

            chatMsgDto = chatResponse;

            chatAssistantResponse.Message += chatMsgDto.Message;

            await ScrollBottom();
        }

        QueryVal = string.Empty;
        await queryInput.FocusAsync();

        chatAssistantResponse.Sources.AddRange(chatMsgDto?.Sources);

        await ScrollBottom();
    }

    private async Task ScrollBottom()
    {
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("JsGoodness.ScrollBottom");
    }

}